{"version":3,"sources":["hub/Hub.js"],"names":["baseapi","window","location","protocol","host","url","url2","controlUrl","room","settings","Hub","_isMounted","updateSec","setState","time","Date","getOutside","list","map","one","roomname","res","tempis","toFixed","ute","console","log","state","makeChartJson","data","when","color","filter","x","y","i","makeChartNowJson","avg","pricenow","currency","max","min","parseFloat","makeChartTempJson","col","should","measured","myformatter","nr","divided","toString","replace","extractPrices","tomorrow","temp","hours","key","hour","price","push","handlePrices","length","MyResponsiveBar","input","keys","margin","top","right","bottom","left","padding","innerPadding","indexBy","groupMode","colors","id","borderRadius","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendOffset","axisLeft","legendPosition","labelSkipWidth","labelSkipHeight","labelTextColor","label","d","value","enableGridY","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","tooltip","theme","container","background","animate","motionStiffness","motionDamping","chartnow","MyResponsiveTempBar","barComponent","width","height","Fragment","cx","cy","r","Math","fill","alignmentBaseline","textAnchor","stroke","dy","strokeWidth","name","charttemp","MyResponsiveLine","chdata","xScale","type","yScale","orient","datum","pointSize","pointColor","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","enableSlices","symbolShape","symbolBorderColor","itemBackground","chart","average","percent","today","prices","controls","tomspot","chartdata","chartnowdata","charttempdata","this","getHours","day","getDate","day1","month","getMonth","getMinutes","fetch","then","results","json","tis","showtemp","curr","Currency","Average","extract","results2","data2","chartdata1","chartdata2","chartdata3","results3","data3","catch","err","setInterval","text","tdata","showoutside","h","m","s","getSeconds","item","className","striped","bordered","hover","size","responsive","Component"],"mappings":"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","file":"static/js/5.5f6220e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Hub.css\";\nimport Table from 'react-bootstrap/Table';\nimport { ResponsiveLine } from '@nivo/line';\nimport { ResponsiveBar } from '@nivo/bar';\n\nconst baseapi = window.location.protocol + \"//\" + window.location.host + \"/api\";\n\nconst url = baseapi + \"/today\";\nconst url2 = baseapi + \"/today2\";\nconst controlUrl = baseapi + \"/controls\";\nconst room = baseapi + \"/roomssensors\";\nconst settings = baseapi + \"/settings\";\n\nexport default class Hub extends Component {\n  _isMounted = false;\n\n  constructor() {\n    super();\n    this.state = {\n      pricenow: '0',\n      currency: 'öre/kwh',\n      hour: '0',\n      name: '',\n      average: '0',\n      tempis: '0',\n      measured: '0',\n      should: '0',\n      percent: '0',\n      max: 0,\n      min: 3000,\n      today: '',\n      tomorrow: '',\n      hours: [],\n      prices: [],\n      controls: [],\n      tomspot: [],\n      chart: null,\n      chartdata: null,\n      chartnow: null,\n      chartnowdata: null,\n      charttemp: null,\n      charttempdata: null,\n      time: new Date()\n    }\n  }\n\n  componentDidMount() {\n    //console.log(window.location, this.props.location, this.props.location.pathname);\n    this._isMounted = true;\n    //let d = new Date();\n    let d= this.state.time;\n    let hour = d.getHours();\n    let day = d.getDate();\n    let day1 = d.getDate() + 1;\n    let month = d.getMonth() + 1;\n    let today = day + \"/\" + month;\n    let tomorrow = day1 + \"/\" + month;\n    let minutes = d.getMinutes();\n\n    hour = hour === 0 ? 24 : hour;\n\n\n    fetch(room)\n    .then(results => {\n      //console.log(\"results\", results);\n      return results.json();\n    })\n    .then(data => {\n        console.log(\"roomssensors\", data[0]);\n        this.getOutside(data);\n        let tis = data && data[0] && data[0].tempis ? data[0].tempis.toFixed(1) : \"\";\n        let showtemp = tis ? tis : 'Kommer visa ärvärde';\n        this.setState({tempis: showtemp});\n        if (data[0]) {\n          this.setState({measured: data[0].measured});\n          this.setState({should: data[0].should});\n          this.setState({name: data[0].roomname});\n        }\n        return fetch(url)\n    })\n    .then(results => {\n      //console.log(\"results\", results);\n      return results.json();\n    })\n    .then(data => {\n      if (this._isMounted) {\n        //console.log(data);\n        let key = 'Hour' + hour;\n        let curr = data.Currency === 'EUR' ? 'c/kwh' : 'öre/kwh';\n\n        let avg = this.myformatter(data.Average);\n        let pricenow = this.myformatter(data[key]);\n\n        let extract = this.extractPrices(data);\n\n        let temp = this.handlePrices(extract);\n        //console.log(\"data\", hour, data, avg);\n\n        let chartdata = this.makeChartJson(extract, 'idag', \"hsl(15, 100%, 34%)\");\n        let chartnowdata = this.makeChartNowJson(data.Average, data[key]);\n        let charttempdata = this.makeChartTempJson();\n\n        this.setState({average: avg});\n        this.setState({pricenow: pricenow});\n        this.setState({hour: hour});\n        this.setState({currency: curr});\n        this.setState({today: today});\n        this.setState({tomorrow: tomorrow});\n        this.setState({prices: temp});\n        this.setState({chartdata: chartdata});\n        this.setState({chartnowdata: chartnowdata});\n        this.setState({charttempdata: charttempdata});\n        this.MyResponsiveLine([this.state.chartdata]);\n        this.MyResponsiveBar([this.state.chartnowdata]);\n        this.MyResponsiveTempBar([this.state.charttempdata]);\n        return fetch(controlUrl)\n      }\n    })\n    .then(results2 => {\n      //console.log(\"results2\", results2);\n      return results2.json();\n    })\n    .then(data2 => {\n      console.log(\"data2\", data2);\n      this.setState({controls: data2});\n      if (hour >= 16) {\n        return fetch(url2)\n        .then(results => {\n          //console.log(\"results\", results);\n          return results.json();\n        })\n        .then(data => {\n          let extract = this.extractPrices(data, \"tomorrow\");\n          //console.log(extract);\n          let temp = this.handlePrices(extract);\n          let chartdata1 = this.state.chartdata;\n          let chartdata2 = this.makeChartJson(extract, 'imorgon', 'hsl(194, 38%, 30%)');\n          //console.log(\"Båda chartdata:\", chartdata1, chartdata2, typeof(chartdata1));\n          const chartdata3 = [];\n          if (chartdata1) chartdata3.push(chartdata1);\n          if (chartdata2) chartdata3.push(chartdata2);\n\n          this.setState({tomspot: temp});\n          //console.log(chartdata3);\n          this.MyResponsiveLine(chartdata3);\n          return fetch(settings)\n        })\n      } else {\n          return fetch(settings)\n      }\n    })\n    .then(results3 => {\n        //console.log(results3);\n        return results3.json();\n    })\n    .then(data3 => {\n        this.setState({percent: data3.percent})\n    })\n    .catch(err => {\n      console.log(err);\n      if (err.name === 'AbortError') return;\n      throw err;\n    });\n    setInterval(this.updateSec, 1000)\n  }\n\n  updateSec =() => {\n    this.setState({\n      time: new Date()\n    })\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  getOutside = (list) => {\n      list.map(one => {\n          if (one.roomname === \"Ute\") {\n              const res = one.tempis ? one.tempis.toFixed(1) : \"\";\n              this.setState({ute: res});\n              console.log(this.state.ute);\n          }\n      });\n  }\n\n  makeChartJson = (data, when, color) => {\n      //console.log(data);\n      let filtered = data.filter(x => x !== null);\n      //x: i < 9 ? `0${i+1}` : `${i+1}`,\n      let res = {\n          'id': when,\n          color: color,\n          'data': filtered.map((y, i) => ({\n            x: i < 9 ? `0${i+1}` : `${i+1}`,\n            y,\n          })),\n        };\n    //console.log(res);\n    return res;\n  }\n\n  makeChartNowJson = (avg, pricenow) => {\n    return {\n      \"what\": this.state.currency,\n      \"max\": this.state.max,\n      \"maxColor\": \"hsl(15, 100%, 34%)\",\n      \"min\": this.state.min,\n      \"minColor\": \"hsl(38, 79%, 56%)\",\n      \"nu\": parseFloat(pricenow)/10,\n      \"nuColor\": \"hsl(54, 84%, 65%)\",\n      \"medel\": parseFloat(avg)/10,\n      \"medelColor\": \"hsl(96, 32%, 40%)\",\n    }\n  }\n\n  makeChartTempJson = () => {\n    let col = this.state.tempis > this.state.should ?\n      \"hsl(15, 100%, 34%)\" :\n      //\"hsl(194, 35%, 56%)\";\n      \"hsl(194, 37%, 57%)\";\n\n    return {\n      \"what\": \"Uppmätt: \" + this.state.measured,\n      \"önskad\": this.state.should,\n      \"önskadColor\": \"hsl(96, 32%, 40%)\",\n      \"verklig\": parseFloat(this.state.tempis),\n      \"verkligColor\": col,\n    }\n  }\n\n\n  myformatter = (nr) => {\n      let divided = (parseFloat(nr) / 10).toFixed(1);\n      divided = divided.toString();\n      divided = divided.replace(\".\", \",\");\n      if (nr === \"\") {\n          divided = null;\n      }\n      return divided;\n  }\n\n  extractPrices = (data, tomorrow=null) => {\n      let temp = [];\n      let hours = ['När'];\n      let max = this.state.max;\n      let min = this.state.min;\n      for (let i = 1; i < 25; i++) {\n          let key = 'Hour' + i;\n          let hour = i < 10 ? '0' + i : i + \"\";\n          let price = 0;\n          if (i === 3) {\n              key = 'Hour' + i + 'A';\n              price = data[key] === \"\" ? null : (parseFloat(data[key]) / 10);\n              if (price) {\n                min = price < min && tomorrow === null ? price : min;\n                max = price > max && tomorrow === null ? price : max;\n                price = price.toFixed(1);\n                temp.push(price);\n                hours.push(hour);\n              }\n              //console.log(key, price);\n              key = 'Hour' + i + 'B';\n              hour = \"VT\";\n          }\n          price = data[key] === \"\" ? null : (parseFloat(data[key]) / 10);\n          if (price) {\n            min = price < min && tomorrow === null ? price : min;\n            max = price > max && tomorrow === null ? price : max;\n            price = price.toFixed(1);\n            temp.push(price);\n            hours.push(hour);\n          }\n    }\n    //console.log(hours);\n    this.setState({hours: hours});\n    this.setState({max: max});\n    this.setState({min: min});\n    return temp;\n  }\n\n  handlePrices = (data) => {\n    let temp =[];\n      for (let i = 0; i < data.length; i++) {\n        let nr = data[i] === null ? data[i] : data[i].toString();\n        nr = nr === null ? nr : nr.replace(\".\", \",\");\n        temp.push(nr);\n      }\n    return temp;\n  }\n\n  MyResponsiveBar = (input) => {\n    let temp = (\n        <ResponsiveBar\n          data={input}\n          keys={[ 'max', 'min', 'nu', 'medel']}\n          margin={{ top: 50, right: 50, bottom: 50, left: 60 }}\n          padding={0.1}\n          innerPadding={15}\n          indexBy=\"what\"\n          groupMode=\"grouped\"\n          colors={({ id, data }) => data[`${id}Color`]}\n          borderRadius={5}\n          borderColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n          axisTop={null}\n          axisRight={null}\n          axisBottom={{ tickSize: 5, tickPadding: 5, tickRotation: 0, legend: '', legendOffset: 36 }}\n          axisLeft={{\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'Idag',\n            legendPosition: 'start',\n            legendOffset: -40\n          }}\n          labelSkipWidth={20}\n          labelSkipHeight={20}\n          labelTextColor={'black'}\n          label={d => `${d.value}`}\n          enableGridY={true}\n          legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'row',\n                justify: false,\n                translateX: 10,\n                translateY: -20,\n                itemsSpacing: 5,\n                itemWidth: 50,\n                itemHeight: 10,\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.9,\n                symbolSize: 10,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n          ]}\n          tooltip={({ id, value, color }) => (\n            <strong style={{ color }}>\n              {id}: {value } {this.state.currency}\n            </strong>\n          )}\n          theme={{\n            tooltip: {\n              container: {\n                background: '#474747',\n              },\n            },\n          }}\n          animate={true}\n          motionStiffness={90}\n          motionDamping={15}\n        />\n      )\n      this.setState({chartnow: temp});\n  }\n\n  MyResponsiveTempBar = (input) => {\n    const CustomBarComponent = ({ x, y, width, height, color, data }) => \n    (\n      <React.Fragment>\n      <circle cx={x + width / 2} cy={y + height / 2} r={Math.min(width, height) / 2} fill={color} />\n      <text x={x + width / 2} y={(y + height / 2) - (height / 6)} alignmentBaseline={\"central\"} textAnchor={'middle'} stroke={'#f8f9fa'} dy={\".1em\"} strokeWidth={'1px'}>{this.state.name }\n      <tspan x={x + width / 2} y={(y + height / 2) + (height / 6)}>{data.value} {'\\u00b0C'}</tspan>\n      </text>\n      </React.Fragment>\n    );\n\n      let temp = (\n        <ResponsiveBar\n          data={input}\n          keys={[ 'verklig', 'önskad']}\n          margin={{ top: 50, right: 40, bottom: 50, left: 40 }}\n          padding={0}\n          innerPadding={10}\n          indexBy=\"what\"\n          groupMode=\"grouped\"\n          barComponent={CustomBarComponent}\n          //colors={{ scheme: 'nivo' }}\n          colors={({ id, data }) => data[`${id}Color`]}\n          borderRadius={5}\n          borderColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\n          axisTop={null}\n          axisRight={null}\n          axisLeft={null}\n          axisBottom={{ tickSize: 0, legend: '' }}\n          labelSkipWidth={20}\n          labelSkipHeight={20}\n          labelTextColor={'black'}\n          label={d => this.state.name + `: ${d.value}` + '\\u00b0C'}\n          enableGridY={true}\n          legends={[\n            {\n                dataFrom: 'keys',\n                anchor: 'top-left',\n                direction: 'row',\n                justify: false,\n                translateX: 10,\n                translateY: -20,\n                itemsSpacing: 5,\n                itemWidth: 50,\n                itemHeight: 20,\n                itemDirection: 'left-to-right',\n                itemOpacity: 0.9,\n                symbolSize: 10,\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n          ]}\n          animate={true}\n          motionStiffness={90}\n          motionDamping={15}\n        />\n      )\n      this.setState({charttemp: temp});\n  }\n\n  MyResponsiveLine = (chdata) => {\n      //console.log(\"chdata\", chdata);\n      let temp = (\n        <ResponsiveLine\n          data={chdata}\n          margin={{ top: 50, right: 5, bottom: 50, left: 35 }}\n          xScale={{ type: 'point' }}\n          yScale={{ type: 'linear', min: 0, max: 'auto' }}\n          axisTop={null}\n          axisRight={null}\n          axisBottom={{\n              tickSize: 3,\n              tickPadding: 3,\n              tickRotation: 0,\n              legend: 'Spotpriser',\n              legendOffset: 35,\n              legendPosition: 'start'\n          }}\n          axisLeft={{\n              orient: 'left',\n              tickSize: 3,\n              tickPadding: 3,\n              tickRotation: 0,\n              legend: this.state.currency,\n              legendOffset: -30,\n              legendPosition: 'end'\n          }}\n          //colors={{ scheme: 'set1' }}\n          colors={{ datum: 'color' }}\n          pointSize={5}\n          pointColor={{ from: 'color', modifiers: [] }}\n          pointBorderWidth={2}\n          pointBorderColor={{ from: 'color' }}\n          pointLabel=\"y\"\n          pointLabelYOffset={60}\n          enableSlices=\"x\"\n          legends={[\n            {\n                anchor: 'top-left',\n                direction: 'row',\n                justify: false,\n                translateX: 10,\n                translateY: -40,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.9,\n                symbolSize: 10,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .9)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .08)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n      />\n    )\n    this.setState({chart: temp});\n  }\n\n  render() {\n    let prices = this.state.prices;\n    let controls = this.state.controls;\n    let hours = this.state.hours;\n    let percent = this.state.percent;\n    let text = null;\n    let tdata = null;\n    let showoutside = this.state.ute ? <p>Utetemp: { this.state.ute } {'\\u00b0C'}</p> : \"\";\n\n    let d= this.state.time;\n    const h = d.getHours();\n    const m = d.getMinutes();\n    const s = d.getSeconds();\n\n    if (this.state.hour >= 16) {\n        text = <td>{this.state.tomorrow}</td>;\n        tdata = this.state.tomspot.map((item,i) => <td key = {i}>{item}</td>);\n    }\n\n    return (\n          <div className=\"hub-page\">\n            <h1>Välkommen till BehovsBoBoxen 2019</h1>\n            <p>{h}:{(m < 10 ? '0' + m : m)}:{(s < 10 ? '0' + s : s)}\n            </p>\n\n            <div className=\"half\">\n                <div className=\"chartnow\">\n                  {this.state.chartnow}\n                </div>\n            </div>\n            <div className=\"half\">\n              <div className=\"charttemp\">\n                  {this.state.charttemp}\n                </div>\n            </div>\n\n\n            <Table striped bordered hover size=\"sm\" responsive className=\"mytable\">\n              <caption>Styrning: <span className=\"normal\"></span> Börtemp <span className=\"boxwarm\"></span> Maxtemp <span className=\"boxcold\"></span> Mintemp <span className=\"boxaway\"></span> Bortatemp </caption>\n              <thead>\n                <tr>\n                  {hours.map((item,i) => <th key = {i}>{item}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{this.state.today}</td>\n                  {prices.map((item,i) => <td key = {i}>{item}</td>)}\n                </tr>\n                <tr className=\"control\"><td>{percent + '%'}</td>{controls.map((item,i) => <td key = {i} className={'class' + item}></td>)}</tr>\n                <tr>{text}{tdata}</tr>\n              </tbody>\n            </Table>\n\n            {showoutside}\n\n            <div className=\"chart\">\n              {this.state.chart}\n            </div>\n        </div>\n    );\n  }\n}"],"sourceRoot":""}