{"version":3,"sources":["hub/Hub.js"],"names":["baseapi","window","location","hostname","url","url2","controlUrl","zone","settings","Hub","_isMounted","makeChartJson","data","when","color","id","filter","x","map","y","i","myformatter","nr","divided","parseFloat","toFixed","toString","replace","extractPrices","temp","hours","key","hour","price","push","setState","handlePrices","length","MyResponsiveLine","chdata","margin","top","right","bottom","left","xScale","type","yScale","min","max","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","orient","state","currency","colors","scheme","pointSize","pointColor","from","modifiers","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","enableSlices","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","chart","pricenow","name","average","tempis","measured","should","percent","today","tomorrow","prices","controls","tomspot","chartdata","console","log","this","props","pathname","d","Date","getHours","day","getDate","day1","month","getMonth","minutes","getMinutes","fetch","then","results","json","tis","curr","Currency","avg","Average","extract","results2","data2","chartdata1","chartdata2","chartdata3","results3","data3","catch","err","text","tdata","item","className","header","striped","bordered","hover","size","responsive","Component"],"mappings":"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","file":"static/js/5.aab7aba9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Hub.css\";\nimport Table from 'react-bootstrap/Table';\nimport { ResponsiveLine } from '@nivo/line';\n\nconst baseapi = 'http://' + window.location.hostname + ':1337';\nconst url = baseapi + \"/today\";\nconst url2 = baseapi + \"/spotcal/2\";\nconst controlUrl = baseapi + \"/control\";\nconst zone = baseapi + \"/zones/1\";\nconst settings = baseapi + \"/settings\";\n\nexport default class Hub extends Component {\n  _isMounted = false;\n\n  constructor() {\n    super();\n    this.state = {\n      pricenow: '0',\n      currency: 'öre/kwh',\n      hour: '0',\n      name: '',\n      average: '0',\n      tempis: '0',\n      measured: '0',\n      should: '0',\n      percent: '0',\n      today: '',\n      tomorrow: '',\n      hours: [],\n      prices: [],\n      controls: [],\n      tomspot: [],\n      chart: null,\n      chartdata: null\n    }\n  }\n\n  componentDidMount() {\n    console.log(window.location, this.props.location, this.props.location.pathname);\n    this._isMounted = true;\n    let d = new Date();\n    let hour = d.getHours();\n    let day = d.getDate();\n    let day1 = d.getDate() + 1;\n    let month = d.getMonth() + 1;\n    let today = day + \"/\" + month;\n    let tomorrow = day1 + \"/\" + month;\n    let minutes = d.getMinutes();\n    console.log(hour, minutes);\n\n\n    fetch(zone)\n    .then(results => {\n      //console.log(\"results\", results);\n      return results.json();\n    })\n    .then(data => {\n      if (this._isMounted) {\n        //console.log(\"data\", data);\n        let tis = data.tempis.toFixed(1);\n        this.setState({should: data.should});\n        this.setState({measured: data.measured});\n        this.setState({tempis: tis});\n        this.setState({name: data.name});\n        return fetch(url)\n      }\n    })\n    .then(results => {\n      //console.log(\"results\", results);\n      return results.json();\n    })\n    .then(data => {\n      if (this._isMounted) {\n        //console.log(data);\n        let key = 'Hour' + hour;\n        let curr = data.Currency === 'EUR' ? 'c/kwh' : 'öre/kwh';\n\n        let avg = this.myformatter(data.Average);\n        let pricenow = this.myformatter(data[key]);\n\n        let extract = this.extractPrices(data);\n\n        let temp = this.handlePrices(extract);\n        //console.log(\"data\", hour, data, avg);\n\n        let chartdata = this.makeChartJson(extract, 'idag', 'hsl(12,100%,46%)');\n\n        this.setState({average: avg});\n        this.setState({pricenow: pricenow});\n        this.setState({hour: hour});\n        this.setState({currency: curr});\n        this.setState({today: today});\n        this.setState({tomorrow: tomorrow});\n        this.setState({prices: temp});\n        this.setState({chartdata: chartdata});\n        this.MyResponsiveLine([this.state.chartdata]);\n        return fetch(controlUrl)\n      }\n    })\n    .then(results2 => {\n      console.log(\"results2\", results2);\n      return results2.json();\n    })\n    .then(data2 => {\n      console.log(\"data2\", data2);\n      this.setState({controls: data2});\n      if (hour >= 16 && minutes >= 3) {\n        return fetch(url2)\n        .then(results => {\n          //console.log(\"results\", results);\n          return results.json();\n        })\n        .then(data => {\n          let extract = this.extractPrices(data);\n          //console.log(extract);\n          let temp = this.handlePrices(extract);\n          let chartdata1 = this.state.chartdata;\n          let chartdata2 = this.makeChartJson(extract, 'imorgon', 'orange');\n          //console.log(\"Båda chartdata:\", chartdata1, chartdata2, typeof(chartdata1));\n          const chartdata3 = [];\n          if (chartdata1) chartdata3.push(chartdata1);\n          if (chartdata2) chartdata3.push(chartdata2);\n\n          this.setState({tomspot: temp});\n          //console.log(chartdata3);\n          this.MyResponsiveLine(chartdata3);\n          return fetch(settings)\n        })\n      } else {\n          return fetch(settings)\n      }\n    })\n    .then(results3 => {\n        console.log(results3);\n        return results3.json();\n    })\n    .then(data3 => {\n        this.setState({percent: data3.percent})\n    })\n    .catch(err => {\n      console.log(err);\n      if (err.name === 'AbortError') return;\n      throw err;\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  makeChartJson = (data, when, color) => {\n      //console.log(data);\n      let filtered = data.filter(x => x !== null);\n      let res = {\n          id: when,\n          color: color,\n          data: filtered.map((y, i) => ({\n            x: i < 9 ? `0${i+1}` : `${i+1}`,\n            y,\n          })),\n        };\n    //console.log(res);\n    return res;\n  }\n\n  myformatter = (nr) => {\n      let divided = (parseFloat(nr) / 10).toFixed(1);\n      divided = divided.toString();\n      divided = divided.replace(\".\", \",\");\n      if (nr === \"\") {\n          divided = null;\n      }\n      return divided;\n  }\n\n  extractPrices = (data) => {\n      let temp = [];\n      let hours = ['När'];\n      for (let i = 1; i < 25; i++) {\n          let key = 'Hour' + i;\n          let hour = i < 10 ? '0' + i : i + \"\";\n          let price = 0;\n          if (i === 3) {\n              key = 'Hour' + i + 'A';\n              price = data[key] === \"\" ? null : (parseFloat(data[key]) / 10).toFixed(1);\n              if (price) { \n                temp.push(price);\n                hours.push(hour);\n              }\n              //console.log(key, price);\n              key = 'Hour' + i + 'B';\n              hour = \"VT\";\n          }\n          price = data[key] === \"\" ? null : (parseFloat(data[key]) / 10).toFixed(1);\n          if (price) {\n            temp.push(price);\n            hours.push(hour);\n          }\n          //console.log( key, price);\n    }\n    //console.log(hours);\n    this.setState({hours: hours});\n    return temp;\n  }\n\n  handlePrices = (data) => {\n    let temp =[];\n      for (let i = 0; i < data.length; i++) {\n        let nr = data[i] === null ? data[i] : data[i].toString();\n        nr = nr === null ? nr : nr.replace(\".\", \",\");\n        temp.push(nr);\n      }\n    return temp;\n  }\n\n  MyResponsiveLine = (chdata) => {\n      //console.log(chdata);\n      let temp = (\n      <ResponsiveLine\n          data={chdata}\n          margin={{ top: 50, right: 20, bottom: 50, left: 45 }}\n          xScale={{ type: 'point' }}\n          yScale={{ type: 'linear', min: 0, max: 'auto' }}\n          axisTop={null}\n          axisRight={null}\n          axisBottom={{\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              legend: 'spotpriser',\n              legendOffset: 35,\n              legendPosition: 'start'\n          }}\n          axisLeft={{\n              orient: 'left',\n              tickSize: 5,\n              tickPadding: 5,\n              tickRotation: 0,\n              legend: this.state.currency,\n              legendOffset: -35,\n              legendPosition: 'end'\n          }}\n          colors={{ scheme: 'set1' }}\n          pointSize={5}\n          pointColor={{ from: 'color', modifiers: [] }}\n          pointBorderWidth={2}\n          pointBorderColor={{ from: 'color' }}\n          pointLabel=\"y\"\n          pointLabelYOffset={60}\n          enableSlices=\"x\"\n          legends={[\n            {\n                anchor: 'top-left',\n                direction: 'row',\n                justify: false,\n                translateX: 10,\n                translateY: -40,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 10,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .9)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .08)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n      />\n    )\n    this.setState({chart: temp});\n  }\n\n  render() {\n    let prices = this.state.prices;\n    let controls = this.state.controls;\n    let hours = this.state.hours;\n    let percent = this.state.percent;\n    let text = null;\n    let tdata = null;\n    if (this.state.hour > 16) {\n        text = <td>{this.state.tomorrow}</td>;\n        tdata = this.state.tomspot.map((item,i) => <td key = {i}>{item}</td>);\n    }\n\n    return (\n          <div className=\"hub-page\">\n            <p><span className=\"red-small larger-font\">{this.state.pricenow} </span>{this.state.currency} kl.{this.state.hour}\n            <br />Medelpris idag: <span className=\"red-small larger-font\">{this.state.average}</span> {this.state.currency}<br />{this.state.header}\n            <br />Temperatur {this.state.name}: <span className=\"red-small larger-font\">{this.state.tempis}</span> &deg;C\n            <br />Du önskar: <span  className=\"red-small larger-font\">{this.state.should}</span> &deg;C\n            <br />Uppmätt: {this.state.measured}</p>\n\n            <Table striped bordered hover size=\"sm\" responsive className=\"mytable\">\n              <thead>\n                <tr>\n                  {hours.map((item,i) => <th key = {i}>{item}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{this.state.today}</td>\n                  {prices.map((item,i) => <td key = {i}>{item}</td>)}\n                </tr>\n                <tr className=\"control\"><td>{percent + '%'}</td>{controls.map((item,i) => <td key = {i} className={'class' + item}></td>)}</tr>\n                <tr>{text}{tdata}</tr>\n              </tbody>\n            </Table>\n\n            <div className=\"chart\">\n              {this.state.chart}\n            </div>\n        </div>\n    );\n  }\n}"],"sourceRoot":""}